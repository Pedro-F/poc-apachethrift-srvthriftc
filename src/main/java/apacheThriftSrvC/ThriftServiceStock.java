/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package apacheThriftSrvC;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-20")
public class ThriftServiceStock {

  public interface Iface {

    public String recuperaStock(String nombre, String color, String talla) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void recuperaStock(String nombre, String color, String talla, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String recuperaStock(String nombre, String color, String talla) throws org.apache.thrift.TException
    {
      send_recuperaStock(nombre, color, talla);
      return recv_recuperaStock();
    }

    public void send_recuperaStock(String nombre, String color, String talla) throws org.apache.thrift.TException
    {
      recuperaStock_args args = new recuperaStock_args();
      args.setNombre(nombre);
      args.setColor(color);
      args.setTalla(talla);
      sendBase("recuperaStock", args);
    }

    public String recv_recuperaStock() throws org.apache.thrift.TException
    {
      recuperaStock_result result = new recuperaStock_result();
      receiveBase(result, "recuperaStock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperaStock failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void recuperaStock(String nombre, String color, String talla, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperaStock_call method_call = new recuperaStock_call(nombre, color, talla, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperaStock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nombre;
      private String color;
      private String talla;
      public recuperaStock_call(String nombre, String color, String talla, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
        this.color = color;
        this.talla = talla;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperaStock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperaStock_args args = new recuperaStock_args();
        args.setNombre(nombre);
        args.setColor(color);
        args.setTalla(talla);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperaStock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("recuperaStock", new recuperaStock());
      return processMap;
    }

    public static class recuperaStock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperaStock_args> {
      public recuperaStock() {
        super("recuperaStock");
      }

      public recuperaStock_args getEmptyArgsInstance() {
        return new recuperaStock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recuperaStock_result getResult(I iface, recuperaStock_args args) throws org.apache.thrift.TException {
        recuperaStock_result result = new recuperaStock_result();
        result.success = iface.recuperaStock(args.nombre, args.color, args.talla);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("recuperaStock", new recuperaStock());
      return processMap;
    }

    public static class recuperaStock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperaStock_args, String> {
      public recuperaStock() {
        super("recuperaStock");
      }

      public recuperaStock_args getEmptyArgsInstance() {
        return new recuperaStock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            recuperaStock_result result = new recuperaStock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recuperaStock_result result = new recuperaStock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperaStock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.recuperaStock(args.nombre, args.color, args.talla,resultHandler);
      }
    }

  }

  public static class recuperaStock_args implements org.apache.thrift.TBase<recuperaStock_args, recuperaStock_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperaStock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperaStock_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TALLA_FIELD_DESC = new org.apache.thrift.protocol.TField("talla", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recuperaStock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recuperaStock_argsTupleSchemeFactory());
    }

    public String nombre; // required
    public String color; // required
    public String talla; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre"),
      COLOR((short)2, "color"),
      TALLA((short)3, "talla");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          case 2: // COLOR
            return COLOR;
          case 3: // TALLA
            return TALLA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TALLA, new org.apache.thrift.meta_data.FieldMetaData("talla", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperaStock_args.class, metaDataMap);
    }

    public recuperaStock_args() {
    }

    public recuperaStock_args(
      String nombre,
      String color,
      String talla)
    {
      this();
      this.nombre = nombre;
      this.color = color;
      this.talla = talla;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperaStock_args(recuperaStock_args other) {
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetColor()) {
        this.color = other.color;
      }
      if (other.isSetTalla()) {
        this.talla = other.talla;
      }
    }

    public recuperaStock_args deepCopy() {
      return new recuperaStock_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
      this.color = null;
      this.talla = null;
    }

    public String getNombre() {
      return this.nombre;
    }

    public recuperaStock_args setNombre(String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public String getColor() {
      return this.color;
    }

    public recuperaStock_args setColor(String color) {
      this.color = color;
      return this;
    }

    public void unsetColor() {
      this.color = null;
    }

    /** Returns true if field color is set (has been assigned a value) and false otherwise */
    public boolean isSetColor() {
      return this.color != null;
    }

    public void setColorIsSet(boolean value) {
      if (!value) {
        this.color = null;
      }
    }

    public String getTalla() {
      return this.talla;
    }

    public recuperaStock_args setTalla(String talla) {
      this.talla = talla;
      return this;
    }

    public void unsetTalla() {
      this.talla = null;
    }

    /** Returns true if field talla is set (has been assigned a value) and false otherwise */
    public boolean isSetTalla() {
      return this.talla != null;
    }

    public void setTallaIsSet(boolean value) {
      if (!value) {
        this.talla = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((String)value);
        }
        break;

      case COLOR:
        if (value == null) {
          unsetColor();
        } else {
          setColor((String)value);
        }
        break;

      case TALLA:
        if (value == null) {
          unsetTalla();
        } else {
          setTalla((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      case COLOR:
        return getColor();

      case TALLA:
        return getTalla();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      case COLOR:
        return isSetColor();
      case TALLA:
        return isSetTalla();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperaStock_args)
        return this.equals((recuperaStock_args)that);
      return false;
    }

    public boolean equals(recuperaStock_args that) {
      if (that == null)
        return false;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_color = true && this.isSetColor();
      boolean that_present_color = true && that.isSetColor();
      if (this_present_color || that_present_color) {
        if (!(this_present_color && that_present_color))
          return false;
        if (!this.color.equals(that.color))
          return false;
      }

      boolean this_present_talla = true && this.isSetTalla();
      boolean that_present_talla = true && that.isSetTalla();
      if (this_present_talla || that_present_talla) {
        if (!(this_present_talla && that_present_talla))
          return false;
        if (!this.talla.equals(that.talla))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nombre = true && (isSetNombre());
      list.add(present_nombre);
      if (present_nombre)
        list.add(nombre);

      boolean present_color = true && (isSetColor());
      list.add(present_color);
      if (present_color)
        list.add(color);

      boolean present_talla = true && (isSetTalla());
      list.add(present_talla);
      if (present_talla)
        list.add(talla);

      return list.hashCode();
    }

    @Override
    public int compareTo(recuperaStock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTalla()).compareTo(other.isSetTalla());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTalla()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talla, other.talla);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recuperaStock_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("color:");
      if (this.color == null) {
        sb.append("null");
      } else {
        sb.append(this.color);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("talla:");
      if (this.talla == null) {
        sb.append("null");
      } else {
        sb.append(this.talla);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperaStock_argsStandardSchemeFactory implements SchemeFactory {
      public recuperaStock_argsStandardScheme getScheme() {
        return new recuperaStock_argsStandardScheme();
      }
    }

    private static class recuperaStock_argsStandardScheme extends StandardScheme<recuperaStock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperaStock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.color = iprot.readString();
                struct.setColorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TALLA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.talla = iprot.readString();
                struct.setTallaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperaStock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.color != null) {
          oprot.writeFieldBegin(COLOR_FIELD_DESC);
          oprot.writeString(struct.color);
          oprot.writeFieldEnd();
        }
        if (struct.talla != null) {
          oprot.writeFieldBegin(TALLA_FIELD_DESC);
          oprot.writeString(struct.talla);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperaStock_argsTupleSchemeFactory implements SchemeFactory {
      public recuperaStock_argsTupleScheme getScheme() {
        return new recuperaStock_argsTupleScheme();
      }
    }

    private static class recuperaStock_argsTupleScheme extends TupleScheme<recuperaStock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperaStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        if (struct.isSetColor()) {
          optionals.set(1);
        }
        if (struct.isSetTalla()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetColor()) {
          oprot.writeString(struct.color);
        }
        if (struct.isSetTalla()) {
          oprot.writeString(struct.talla);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperaStock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.color = iprot.readString();
          struct.setColorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.talla = iprot.readString();
          struct.setTallaIsSet(true);
        }
      }
    }

  }

  public static class recuperaStock_result implements org.apache.thrift.TBase<recuperaStock_result, recuperaStock_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperaStock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperaStock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recuperaStock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recuperaStock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperaStock_result.class, metaDataMap);
    }

    public recuperaStock_result() {
    }

    public recuperaStock_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperaStock_result(recuperaStock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public recuperaStock_result deepCopy() {
      return new recuperaStock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public recuperaStock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperaStock_result)
        return this.equals((recuperaStock_result)that);
      return false;
    }

    public boolean equals(recuperaStock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(recuperaStock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recuperaStock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperaStock_resultStandardSchemeFactory implements SchemeFactory {
      public recuperaStock_resultStandardScheme getScheme() {
        return new recuperaStock_resultStandardScheme();
      }
    }

    private static class recuperaStock_resultStandardScheme extends StandardScheme<recuperaStock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperaStock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperaStock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperaStock_resultTupleSchemeFactory implements SchemeFactory {
      public recuperaStock_resultTupleScheme getScheme() {
        return new recuperaStock_resultTupleScheme();
      }
    }

    private static class recuperaStock_resultTupleScheme extends TupleScheme<recuperaStock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperaStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperaStock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
